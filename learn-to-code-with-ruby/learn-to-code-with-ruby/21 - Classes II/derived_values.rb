# Anti-pattern - a "pattern" to avoid when writing code

# "Anti-pattern" - это термин, который обозначает шаблон программирования, который кажется правильным, но, на самом деле, 
# может привести к проблемам или нежелательным результатам.

# Derived value - calculated/computed from another piece of state

class Rectangle
  attr_accessor :height, :width
  
  def initialize(height, width)
    @height = height
    @width = width
  end
  
  def area
    height * width
  end
end
  
r = Rectangle.new(3, 5)
p r.area
  
r.height = 10
p r.area
  
r.width = 8
p r.area




# Вот несколько примеров анти-паттернов, которые могут возникнуть в классах Ruby:


# Большой класс: Когда класс становится слишком большим и выполняет слишком много различных задач, это может быть анти-паттерном. 
# Хороший класс должен быть ответственным за конкретную область функциональности.


# Множественные обязанности: Если класс отвечает за несколько различных аспектов (например, хранение данных, 
# обработку логики и представление), это может быть признаком нарушения принципа единственной ответственности.


# Прямой доступ к атрибутам: Если у класса есть много атрибутов, которые доступны напрямую извне (через геттеры и сеттеры), 
# это может привести к проблемам с управлением состоянием.


# Ненадежные сеттеры: Использование сеттеров, которые не проверяют валидность данных, может привести к нежелательным значениям атрибутов.


# Слишком много методов: Если у класса слишком много методов, это может быть признаком того, 
# что он пытается делать слишком много в рамках одного класса.